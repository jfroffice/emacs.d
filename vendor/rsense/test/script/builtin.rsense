type-inference --test=Fixnum --should-be=Fixnum
1_|_
EOF

type-inference --test=String --should-be=String
''_|_
EOF

type-inference --test=Constant1 --should-be=Fixnum
C = 1
C_|_
EOF

type-inference --test=Constant2 --should-be=Fixnum
module M
  C = 1
end
M::C_|_
EOF

type-inference --test=Constant3 --should-be=Fixnum
C = 1
def f
  C
end
f_|_
EOF

type-inference --test=Constant4 --should-be=Fixnum
class C
  D = 1
  def f
    D
  end
end
C.new.f_|_
EOF

type-inference --test=Constant5 --should-be=Fixnum
class C
  A = 1
end
class D < C
  def f
    A
  end
end
D.new.f_|_
EOF

type-inference --test=Constant5 --should-be=Fixnum
class C
  A = 1
  class << self
    def f() A end
  end
end
C.f_|_
EOF

type-inference --test=Array --should-be=Array
[]_|_
EOF

type-inference --test=Array.StaticAccess1 --should-be=Fixnum
[1][0]_|_
EOF

type-inference --test=Array.StaticAccess2 --should-be=Float
[1, 2.3][1]_|_
EOF

type-inference --test=Array.DynamicAccess1 --should-be=Fixnum
a = []
a << 1
a[0]_|_
EOF

type-inference --test=Array.DynamicAccess2 --should-be=Fixnum,String
a = []
a << 1
a << ''
a[0]_|_
EOF

type-inference --test=Array.DynamicAccess3 --should-be=Fixnum,String
a = ['']
a << 1
a[0]_|_
EOF

type-inference --test=Array.DynamicAccess4 --should-be=Fixnum
a = []
b = a[0]
a << 1
b_|_
EOF

type-inference --test=Array.Max --should-be=Fixnum,String
a = ['']
a << 1
a.max_|_
EOF

type-inference --test=Array.Each --should-be=String,Array
a = ['']
a << []
a.each {|v| v_|_ }
EOF

type-inference --test=Array.Push1 --should-be=Fixnum,String
a = [1]
a << ''
a[0]_|_
EOF

type-inference --test=Array.Push2 --should-be=Fixnum,String
a = []
a << 1
a << ''
a[0]_|_
EOF

type-inference --test=Array.Push3 --should-be=Fixnum,Float,String
a = []
a.push(1, 2.3, '')
a[0]_|_
EOF

type-inference --test=Array.Concat --should-be=Fixnum,String
([''] + [1])[0]_|_
EOF

type-inference --test=Array.DataPolymorphism1 --should-be=String
a = []
a << 1
b = []
b << ''
b[0]_|_
EOF

type-inference --test=Array.DataPolymorphism2 --should-be=Fixnum
a = []
a << 1
a << ''
b = []
b << 1
b[0]_|_
EOF

type-inference --test=Array.DataPolymorphism3 --should-be=String,Fixnum
a = []
a << 1
a << ''
a[0]_|_
EOF

type-inference --test=Array.DataPolymorphism4 --keep-env --should-be=String,Fixnum
a = []
a << 1
a << ''
a[0]_|_
EOF

type-inference --test=Hash.StaticAccess1 --should-be=Fixnum
a = { :a => 1 }
a[:a]_|_
EOF

type-inference --test=Hash.StaticAccess2 --should-be=Float
a = { :a => 1, :b => 2.3 }
a[:b]_|_
EOF

type-inference --test=Hash.DynamicAccess1 --should-be=Fixnum
a = {}
a[:a] = 1
a[:a]_|_
EOF

type-inference --test=Hash.DynamicAccess2 --should-be=Fixnum,Float
a = {:a => 1}
a[:a] = 2.3
a[:a]_|_
EOF

type-inference --test=Hash.DynamicAccess3 --should-be=Fixnum,Float
a = {:a => 1}
a[:b] = 2.3
a[:a]_|_
EOF

type-inference --test=Hash.DynamicAccess3 --should-be=Fixnum
a = {}
b = a[:a]
a[:a] = 1
b_|_
EOF

type-inference --test=Hash.Put1 --should-be=Fixnum
a = {}
a[:a] = 0
a[:a]_|_
EOF

type-inference --test=Hash.Put2 --should-be=Fixnum,String
a = {}
a[:a] = 0
a[:a] = ''
a[:a]_|_
EOF

type-inference --test=Hash.DataPolymorphism1 --should-be=String
a = {}
a[:a] = 0
b = {}
b[:a] = ''
b[:a]_|_
EOF

type-inference --test=Hash.DataPolymorphism2 --should-be=Fixnum
a = {}
a[:a] = 0
a[:a] = ''
b = {}
b[:a] = 0
b[:a]_|_
EOF

type-inference --test=Hash.DataPolymorphism3 --should-be=Fixnum,String
a = {}
a[:a] = 0
a[:a] = ''
a[0]_|_
EOF

type-inference --test=Hash.DataPolymorphism4 --keep-end --should-be=Fixnum,String
a = {}
a[:a] = 0
a[:a] = ''
a[0]_|_
EOF

type-inference --test=LocalVar --should-be=Fixnum
a = 1
a_|_
EOF

type-inference --test=GlobalVar1 --should-be=Fixnum
$a = 1
$a_|_
EOF

type-inference --test=GlobalVar2 --should-be=Fixnum
$a = 1
def f
  $a
end
f_|_
EOF

type-inference --test=MultipleAssign1 --should-be=Fixnum
a, b = 1, ''
a_|_
EOF

type-inference --test=MultipleAssign2 --should-be=String
a, b = 1, ''
b_|_
EOF

type-inference --test=MultipleAssign3 --should-contain=String
a, b = 'a,b'.split(',')
b_|_
EOF

type-inference --test=Method.Basic --should-be=Fixnum
def f
  1
end
f_|_
EOF

type-inference --test=Method.Arg.OneArg --should-be=Fixnum
def f(x)
  x
end
f(1)_|_
EOF

type-inference --test=Method.Arg.TwoArg --should-be=Float
def f(x, y)
  y
end
f(1, 2.3)_|_
EOF

type-inference --test=Method.Arg.Optional --should-be=Fixnum
def f(x = 1)
  x
end
f_|_
EOF

type-inference --test=Method.Arg.Optional.Overwrite --should-be=String
def f(x = 1)
  x
end
f('')_|_
EOF

type-inference --test=Method.Arg.Splat --should-be=Array
def f(x, y, *z)
  z
end
f(1, 2, 2.3, '')_|_
EOF

type-inference --test=Method.Arg.Splat.Access --should-be=String
def f(x, y, *z)
  z[1]
end
f(1, 2, 2.3, '')_|_
EOF

type-inference --test=Method.Arg.Splat.None --should-be=Array
def f(x, y, *z)
  z
end
f(1, 2)_|_
EOF

type-inference --test=Method.Arg.Splat.Pass1 --should-be=Float
def f(x, y)
  y
end
f(*[1, 2.3])_|_
EOF

type-inference --test=Method.Arg.Splat.Pass2 --should-be=Fixnum
def f(x, y)
  x
end
f(1, *[1, 2.3])_|_
EOF

type-inference --test=Method.Arg.Splat.Pass3 --should-be=Float
a = [2.3, '']
b = [1]
def f(x, y, z)
  y
end
f(b, *a)_|_
EOF

type-inference --test=Method.Arg.OptionalAndSplat1 --should-be=Fixnum
def f(x, y = 1, *z)
  y
end
f(1)_|_
EOF

type-inference --test=Method.Arg.OptionalAndSplat2 --should-be=Float
def f(x, y = 1, *z)
  z[0]
end
f(1, '', 2.3)_|_
EOF

type-inference --test=Method.Return.Splat1 --should-be=Float
def f
  return [1, 2.3]
end
a, b = f
b_|_
EOF

type-inference --test=Method.Return.Splat2 --should-be=Float
def f
  return *[1, 2.3]
end
a, b = f
b_|_
EOF

type-inference --test=Method.Return.Splat3 --should-be=Fixnum
def f
  return *[1]
end
a = f
a_|_
EOF

type-inference --test=Method.Yield.NoArg --should-be=Fixnum
def f
  yield
end
f {
  1_|_
}
EOF

type-inference --test=Method.Yield.NoArrayArg --should-be=Fixnum
def f
  yield 1
end
f {|x|
  x_|_
}
EOF

type-inference --test=Method.Yield.ArrayArg --should-be=Array
def f
  yield [1]
end
f {|x|
  x_|_
}
EOF

type-inference --test=Method.Yield.ArrayArg.Expand --should-be=Float
def f
  yield [1, 2.3]
end
f {|x, y|
  y_|_
}
EOF

type-inference --test=Method.Yield.ArrayArg.Splat1 --should-be=Array
def f
  yield [1, 2.3]
end
f {|x, *y|
  y_|_
}
EOF

type-inference --test=Method.Yield.ArrayArg.Splat2 --should-be=String
def f
  yield [1, 2.3, '']
end
f {|x, *y|
  y[1]_|_
}
EOF

type-inference --test=Method.Yield.Template --should-be=Fixnum
def f
  yield 1
end
f {|x| x_|_}
EOF

type-inference --test=Method.Yield.Template.NoChange --keep-env --should-be=Fixnum
f {|x| x_|_}
EOF

type-inference --test=Method.Yield.Template.Change --keep-env --should-be=Fixnum
f {|y| y_|_}
EOF

type-inference --test=Method.PartialUpdate1 --should-be=Fixnum
def f(x) x_|_ end
f(1)
EOF

type-inference --test=Method.PartialUpdate2 --keep-env --should-be=Fixnum
def f(x) x_|_ end
f(1)
EOF

type-inference --test=Method.Partialupdate3 --keep-env --should-be=Fixnum
def f(x) 1; x_|_ end
f(1)
EOF

type-inference --test=Module.Attr1 --should-be=Fixnum
class C
  attr :foo
  def initialize() @foo = 1 end
end
C.new.foo_|_
EOF

type-inference --test=Module.Attr2 --should-be-empty
class C
  attr :foo
end
a = C.new
a.foo = 1
a.foo_|_
EOF

type-inference --test=Module.Attr3 --should-be=Fixnum
class C
  attr :foo, true
end
a = C.new
a.foo = 1
a.foo_|_
EOF

type-inference --test=Module.AttrReader1 --should-be=Fixnum
class C
  attr_reader :foo
  def initialize() @foo = 1 end
end
C.new.foo_|_
EOF

type-inference --test=Module.AttrReader2 --should-be=Float
class C
  attr_reader :foo, :bar
  def initialize() @bar = 2.3 end
end
C.new.bar_|_
EOF

type-inference --test=Module.AttrWriter1 --should-be=Fixnum
class C
  attr_writer :foo
  def get() @foo end
end
a = C.new
a.foo = 1
a.get_|_
EOF

type-inference --test=Module.AttrWriter1 --should-be=Float
class C
  attr_writer :foo, :bar
  def get() @bar end
end
a = C.new
a.bar = 2.3
a.get_|_
EOF

type-inference --test=Module.AttrAccessor1 --should-be=Fixnum
class C
  attr_accessor :foo
end
a = C.new
a.foo = 1
a.foo_|_
EOF

type-inference --test=Module.AttrAccessor2 --should-be=Float
class C
  attr_accessor :foo, :bar
end
a = C.new
a.bar = 2.3
a.bar_|_
EOF

type-inference --test=Module.ModuleFunction1 --should-be-empty
module M
  def f() 1 end
end
M.f_|_
EOF

type-inference --test=Module.ModuleFunction2 --should-be=Fixnum
module M
  def f() 1 end
  module_function :f
end
M.f_|_
EOF


type-inference --test=Module.Include.Method --should-be=Fixnum
module M
  def f() 1 end
end
class C
  include M
end
C.new.f_|_
EOF

type-inference --test=Module.Include.TopLevel --should-be=Fixnum
module M
  def f() 1 end
end
include M
f_|_
EOF

type-inference --test=Class.New --should-be=C
class C
end
C.new._|_
EOF

type-inference --test=Class.PartialUpdate1 --should-be=Fixnum
class C
  1_|_
end
EOF

type-inference --test=Class.PartialUpdate2 --keep-env --should-be=Fixnum
class C
  1_|_
end
EOF

type-inference --test=Class.PartialUpdate3 --keep-env --should-be=Float
class C
  2.3_|_
end
EOF

type-inference --test=Class.Method1 --should-be=Fixnum
class C
  def foo() 1 end
end
C.new.foo_|_
EOF

type-inference --test=Class.Method.Alias.Grammar1 --should-be=Fixnum
class C
  def f() 1 end
  alias :g :f
end
C.new.g_|_
EOF

type-inference --test=Class.Method.Alias.Grammar2 --should-be=Fixnum
class C
  class << self
    def f() 1 end
    alias :g :f
  end
end
C.g_|_
EOF

type-inference --test=Class.Method.Alias.Method --should-be=Fixnum
class C
  def f() 1 end
  alias_method(:g, :f)
end
C.new.g_|_
EOF

type-inference --test=Class.Method.PartialUpdate1 --should-be=Fixnum
class C
  def f(x) x_|_ end
end
C.new.f(1)
EOF

type-inference --test=Class.Method.PartialUpdate2 --keep-env --should-be=Fixnum
class C
  def f(x) x_|_ end
end
C.new.f(1)
EOF

type-inference --test=Class.Method.PartialUpdate3 --keep-env --should-be=Fixnum
class C
  def f(x) 1; x_|_ end
end
C.new.f(1)
EOF


type-inference --test=Class.Method.PartialUpdate4 --should-be=Fixnum
class C
  def self.f(x) D.new.f(x) end
  class D
    def f(x) x_|_ end
  end
end
C.f(1)
EOF

type-inference --test=Class.Method.PartialUpdate5 --keep-env --should-be=Fixnum
class C
  def self.f(x) D.new.f(x) end
  class D
    def f(x) x_|_ end
  end
end
C.f(1)
EOF

type-inference --test=Class.Method.PartialUpdate6 --keep-env --should-be=Fixnum
class C
  def self.f(x) D.new.f(x) end
  class D
    def f(x) 1; x_|_ end
  end
end
C.f(1)
EOF

type-inference --test=Class.SingletonMethod1 --should-be=Fixnum
class C
  def self.foo() 1 end
end
C.foo_|_
EOF

type-inference --test=Class.Constructor1 --should-be=Fixnum
class C
  def initialize() @x = 1 end
  def get() @x end
end
C.new.get_|_
EOF

type-inference --test=Class.Constructor.NoArg --should-be=Float
class C
  def initialize(x) @x = x end
  def get() @x end
end
C.new(2.3).get_|_
EOF

type-inference --test=Class.Constructor.OneArg --should-be=Float
class C
  def initialize(x) @x = x end
  def get() @x end
end
C.new(2.3).get_|_
EOF

type-inference --test=Class.Constructor.Block --should-be=Fixnum
class C
  def initialize() yield 1 end
end
C.new {|x| x_|_}
EOF

type-inference --test=SingletonClass.Method1 --should-be=Fixnum
class C
end
class << C
  def f() 1 end
end
C.f_|_
EOF

type-inference --test=SingletonClass.Method2 --should-be=Fixnum
class C
  class << self
    def f() 1 end
  end
end
C.f_|_
EOF

type-inference --test=String.Unpack1 --should-be=String
''.unpack('a')[0]_|_
EOF

type-inference --test=Proc.NoArg --should-be=Fixnum
def f(&b)
  b.call
end
f { 1_|_ }
EOF

type-inference --test=Proc.OneArg --should-be=Fixnum
def f(&b)
  b.call(1)
end
f {|x| x_|_ }
EOF

type-inference --test=Proc.ManyArgs --should-be=Float
def f(&b)
  b.call(1, 2.3)
end
f {|x, y| y_|_ }
EOF

type-inference --test=Proc.ManyArgs2 --should-be=Float
def f(&b)
  b[1, 2.3]
end
f {|x, y| y_|_ }
EOF

type-inference --test=Proc.Result --should-be=String
def f(&b)
  b.call
end
f { '' }_|_
EOF

type-inference --test=Proc.Pass --should-be=String
def f(&b)
  g('', &b)
end
def g(a, &b)
  b.call(a)
end
f {|x| x_|_}
EOF

type-inference --test=Proc.PassAsArg --should-be=String
def f(&b)
  g('', b)
end
def g(a, b)
  b.call(a)
end
f {|x| x_|_}
EOF

type-inference --test=Proc.Generate --should-be=Proc
proc {}_|_
EOF

type-inference --test=Proc.Call --should-be=Fixnum
proc {
  1_|_
}.call
EOF

type-inference --test=Proc.InifinityLoop --should-be=Object
b = proc {|p|
  p.call(p)_|_
}
b.call(b)
EOF

type-inference --test=Proc.HigherOrder1 --should-be=Fixnum,Bignum
def set(&block)
  $block = block  
end
set {|a| a + 1}
$block.call(1)_|_
EOF

type-inference --test=Proc.HigherOrder2 --should-be=Fixnum,Bignum
def adder(a)
  proc {|b| a + b }
end
adder(1).call(2)_|_
EOF

# TODO fix
type-inference --keep-env --test=Proc.HigherOrder.Bug --should-be=Object
def adder(a)
  proc {|b| a + b }
end
adder(1).call(2)_|_
EOF

type-inference --test=Lambda.HigherOrder --should-be=Fixnum,Bignum
def adder(a)
  lambda {|b| a + b }
end
adder(1).call(2)_|_
EOF

type-inference --test=Proc.new.HigherOrder --should-be=Fixnum,Bignum
def adder(a)
  Proc.new {|b| a + b }
end
adder(1).call(2)_|_
EOF

type-inference --test=Range.Begin --should-be=Fixnum
(0..100).begin_|_
EOF

type-inference --test=Range.Begin2 --should-be=Fixnum,Float
(0..100.0).begin_|_
EOF

type-inference --test=Range.Each --should-be=Fixnum
(0..100).each {|x| x_|_}
EOF

type-inference --test=Range.ForEach --should-be=Fixnum
for x in (0..100)
  x_|_
end
EOF

type-inference --test=Annotation.Method.Return --should-be=String
##% f() -> String
def f() end
f_|_
EOF

type-inference --test=Annotation.Method.Arg --should-be=Fixnum
##% f(a) -> a
def f(a) end
f(1)_|_
EOF

type-inference --test=Annotation.Method.Arg.Guard1 --should-be=String
##% f(Fixnum) -> String
def f(a) end
f(1)_|_
EOF

type-inference --test=Annotation.Method.Arg.Guard2 --should-be-empty
##% f(Fixnum) -> String
def f(a) end
f('')_|_
EOF

type-inference --test=Annotation.Method.Arg.Guard3 --should-be=Fixnum
##% f(Fixnum) -> String
##% f(String) -> Fixnum
def f(a) end
f('')_|_
EOF

type-inference --test=Annotation.Method.Arg.Optional --should-be=Fixnum
##% f(?a) -> Fixnum
def f(*a) end
f_|_
EOF

type-inference --test=Annotation.Method.Arg.OptionalGuard1 --should-be=Fixnum
##% f(?String) -> Fixnum
def f(*a) end
f_|_
EOF

type-inference --test=Annotation.Method.Arg.OptionalGuard2 --should-be=Fixnum
##% f(?String) -> Fixnum
def f(*a) end
f('')_|_
EOF

type-inference --test=Annotation.Method.Arg.OptionalGuard3 --should-be-empty
##% f(?String) -> Fixnum
def f(*a) end
f(1)_|_
EOF

type-inference --test=Annotation.Method.Arg.Splat --should-be=Array
##% f(*a) -> a
def f(*a) end
f(1, '')_|_
EOF

type-inference --test=Annotation.Method.Arg.SplatGuard1 --should-be=Fixnum
##% f(*String) -> Fixnum
def f(*a) end
f('', '', '')_|_
EOF

type-inference --test=Annotation.Method.Arg.SplatGuard2 --should-be-empty
##% f(*String) -> Fixnum
def f(*a) end
f('', 1, '')_|_
EOF

type-inference --test=Annotation.Method.Arg.Inheritance --should-be=Fixnum,Float
##% f(?Enumerable<v>) -> v
def f(enum = nil) end
f([1, 2.3])_|_
EOF

type-inference --test=Math --should-be=Float
Math.sin(5)_|_
EOF
